#
#   Central registration of all _tests
#
"use strict"
grunt = require "grunt"
report = require './report'

_tests = {}
_testsNames = undefined

_getTestsNames = () ->
  if _testsNames?
    return _testsNames
  _testsNames = []
  for key, value of _tests
    _testsNames.push key
  _testsNames

_executeTest = ( key, file ) ->
  if !_tests[ key ]
    return false
  thisWhomWeCallThis =
    test:
      key: key
      options: 'options'
    file: file
  _tests[key].fn.apply thisWhomWeCallThis

#
# public methods
#

# register a test
# @param  string  key the key for this test
# @param  string  description describe the test
# @param  function  fn the test function
# @param  object|undefined  options the options for the test
registerTest = ( key, description, fn, options ) ->
  if typeof fn != 'function'
    return false
  _testsNames = undefined
  _tests[key] =
    fn: fn
    description: description
    options: options
  true

# execute _tests on given file
# @param  object  file  fileObject generated by file.coffee
# @param  array|undefined _tests contains the _tests name to be executed of all if undefined
executeTests = ( file, tests ) ->
  tests = if !tests? then _getTestsNames() else tests
  for test in tests
    _executeTest test, file
  true

# export the modules
module.exports =
  registerTest: registerTest
  executeTests: executeTests
  tests: _tests
